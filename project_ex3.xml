<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Place global declarations here.
chan dist_swap;
chan bag[2];
chan place[2];
chan start_feed[2];
chan stop_feed[2];

chan stop_bag[2];
chan move_bag[2];

typedef int[0,1] color_t;
const color_t YELLOW = 0; // go left (A)
const color_t BLACK = 1; // go right (B)

typedef int[0,1] direc_t;
const direc_t left = 0;
const direc_t right = 1;

typedef int[0,1] motion_t;
const motion_t stop = 0;
const motion_t move = 1;

const int NUM_OF_BAGS = 5; // Anything more than 5 is painfully slow
typedef int[0, NUM_OF_BAGS-1] bag_id_t;
int finished_bags = 0;

direc_t dist_dir = right;
motion_t dist_m = move;

motion_t feed_m[2] = {move, move};

bool sensor_on[2] = {false, false};
int sensor_val[2] = {100, 100};

const color_t color_order[6] = {YELLOW, YELLOW, BLACK, YELLOW, BLACK, BLACK};
//const color_t color_order[5] = {BLACK, YELLOW, BLACK, YELLOW, BLACK};</declaration>
	<template>
		<name>SmortBagDropperEx3</name>
		<parameter>int max_bags, direc_t side</parameter>
		<declaration>int dropped_bags = 0;

clock x;

direc_t other(direc_t side) {
    if (side == left) {
        return right;
    } else {
        return left;
    }
}</declaration>
		<location id="id0" x="-450" y="-246">
			<name x="-425" y="-255">Start</name>
			<label kind="invariant" x="-527" y="-297">dropped_bags &lt;= max_bags &amp;&amp; x &lt;= 50000</label>
		</location>
		<location id="id1" x="-357" y="-102">
			<name x="-348" y="-136">Finished</name>
		</location>
		<location id="id2" x="-542" y="-399">
			<name x="-552" y="-433">Wait</name>
			<label kind="invariant" x="-552" y="-382">x &lt;= 1000</label>
		</location>
		<init ref="id0"/>
		<transition id="id3">
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="-524" y="-356">x &gt;= 1000</label>
			<label kind="assignment" x="-526" y="-327">x := 0</label>
		</transition>
		<transition id="id4">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-425" y="-195">dropped_bags == max_bags &amp;&amp; finished_bags == max_bags</label>
		</transition>
		<transition id="id5">
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="guard" x="-680" y="-238">sensor_on[side]</label>
			<label kind="synchronisation" x="-671" y="-221">place[side]!</label>
			<label kind="assignment" x="-731" y="-195">dropped_bags := dropped_bags + 1,
x := 0</label>
			<nail x="-586" y="-271"/>
		</transition>
	</template>
	<template>
		<name>SingleSort</name>
		<parameter>direc_t side</parameter>
		<declaration>clock y;
clock sys;
int sensor_val_local;
direc_t dest = 0; 
int done = 0;
</declaration>
		<location id="id6" x="-4233" y="-4419">
			<urgent/>
		</location>
		<location id="id7" x="-4292" y="-4326">
			<name x="-4275" y="-4343">waiting_for_bag</name>
		</location>
		<location id="id8" x="-4292" y="-4190">
			<name x="-4267" y="-4208">wait_for_correct_colour</name>
			<label kind="invariant" x="-4377" y="-4199">y &lt;= 800</label>
		</location>
		<location id="id9" x="-4292" y="-4063">
			<name x="-4275" y="-4088">detect_colour</name>
			<urgent/>
		</location>
		<location id="id10" x="-4292" y="-3935">
			<name x="-4302" y="-3969">bag_to_move</name>
			<label kind="invariant" x="-4377" y="-3935">y&lt;=2000</label>
		</location>
		<location id="id11" x="-4199" y="-3935">
			<urgent/>
		</location>
		<location id="id12" x="-3969" y="-3935">
			<name x="-3978" y="-3917">to_swap_dir</name>
			<urgent/>
		</location>
		<location id="id13" x="-3893" y="-4428">
			<name x="-3903" y="-4462">dist_bag</name>
			<urgent/>
		</location>
		<location id="id14" x="-3901" y="-4012">
			<name x="-3876" y="-4029">wait_for_done</name>
			<label kind="invariant" x="-3876" y="-4012">sys &lt;= done</label>
		</location>
		<location id="id15" x="-3893" y="-4165">
			<name x="-3903" y="-4199">swapped_dir</name>
			<urgent/>
		</location>
		<location id="id16" x="-4097" y="-4436">
			<label kind="invariant" x="-4122" y="-4428">y &lt;= 1200</label>
		</location>
		<location id="id17" x="-4318" y="-4496">
			<committed/>
		</location>
		<location id="id18" x="-3978" y="-4131">
			<name x="-3995" y="-4165">no_swap</name>
			<committed/>
		</location>
		<init ref="id17"/>
		<transition id="id19">
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="guard" x="-3986" y="-4037">sys &gt; done</label>
			<label kind="synchronisation" x="-3995" y="-4020">dist_swap!</label>
			<nail x="-3927" y="-4063"/>
		</transition>
		<transition id="id20">
			<source ref="id18"/>
			<target ref="id13"/>
		</transition>
		<transition id="id21">
			<source ref="id17"/>
			<target ref="id6"/>
		</transition>
		<transition id="id22">
			<source ref="id16"/>
			<target ref="id6"/>
			<label kind="guard" x="-4199" y="-4454">y &gt;= 1200</label>
		</transition>
		<transition id="id23">
			<source ref="id15"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-3884" y="-4250">start_feed[side]!</label>
		</transition>
		<transition id="id24">
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="guard" x="-3884" y="-4105">sys &gt;= done</label>
			<label kind="synchronisation" x="-3884" y="-4088">dist_swap!</label>
		</transition>
		<transition id="id25">
			<source ref="id12"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-3935" y="-3969">stop_feed[side]!</label>
		</transition>
		<transition id="id26">
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="guard" x="-4139" y="-3935">dest != dist_dir</label>
		</transition>
		<transition id="id27">
			<source ref="id13"/>
			<target ref="id16"/>
			<label kind="assignment" x="-4071" y="-4513">done := 6000 + 
6000*abs(dist_dir-side),
sys := 0, y := 0</label>
		</transition>
		<transition id="id28">
			<source ref="id11"/>
			<target ref="id18"/>
			<label kind="guard" x="-4173" y="-4029">dest == dist_dir</label>
			<nail x="-4037" y="-4012"/>
		</transition>
		<transition id="id29">
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="guard" x="-4292" y="-3918">y == 2000</label>
		</transition>
		<transition id="id30">
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="assignment" x="-4539" y="-4037">dest := sensor_val_local&lt;=48,
sensor_on[side] := false,
y := 0</label>
		</transition>
		<transition id="id31">
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="guard" x="-4369" y="-4156">y == 800</label>
			<label kind="assignment" x="-4411" y="-4139">sensor_val_local := sensor_val[side]</label>
		</transition>
		<transition id="id32">
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-4377" y="-4284">bag[side]?</label>
			<label kind="assignment" x="-4343" y="-4267">y := 0</label>
		</transition>
		<transition id="id33">
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="assignment" x="-4360" y="-4386">sensor_on[side]:= true</label>
		</transition>
	</template>
	<template>
		<name>Feed</name>
		<parameter>direc_t side</parameter>
		<location id="id34" x="-2074" y="-1937">
			<name x="-2084" y="-1971">Stop</name>
		</location>
		<location id="id35" x="-2074" y="-1827">
			<name x="-2091" y="-1818">Move</name>
		</location>
		<location id="id36" x="-2023" y="-1887">
			<urgent/>
		</location>
		<location id="id37" x="-2116" y="-1887">
			<urgent/>
		</location>
		<init ref="id35"/>
		<transition id="id38">
			<source ref="id37"/>
			<target ref="id34"/>
			<label kind="synchronisation" x="-2218" y="-1929">stop_bag[side]!</label>
		</transition>
		<transition id="id39">
			<source ref="id36"/>
			<target ref="id35"/>
			<label kind="synchronisation" x="-2031" y="-1853">move_bag[side]!</label>
		</transition>
		<transition id="id40">
			<source ref="id35"/>
			<target ref="id37"/>
			<label kind="synchronisation" x="-2252" y="-1861">stop_feed[side]?</label>
			<label kind="assignment" x="-2261" y="-1844">feed_m[side] := stop</label>
		</transition>
		<transition id="id41">
			<source ref="id34"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="-2031" y="-1938">start_feed[side]?</label>
			<label kind="assignment" x="-2023" y="-1921">feed_m[side] := move</label>
		</transition>
	</template>
	<template>
		<name>Distribution</name>
		<location id="id42" x="-59" y="-136">
			<name x="-42" y="-144">Right</name>
		</location>
		<location id="id43" x="-59" y="-272">
			<name x="-34" y="-289">Left</name>
		</location>
		<location id="id44" x="0" y="-204">
			<name x="-10" y="-238">Change2</name>
			<urgent/>
		</location>
		<location id="id45" x="-119" y="-204">
			<name x="-179" y="-238">Change1</name>
			<urgent/>
		</location>
		<init ref="id42"/>
		<transition id="id46">
			<source ref="id44"/>
			<target ref="id42"/>
		</transition>
		<transition id="id47">
			<source ref="id45"/>
			<target ref="id43"/>
		</transition>
		<transition id="id48">
			<source ref="id42"/>
			<target ref="id45"/>
			<label kind="synchronisation" x="-178" y="-178">dist_swap?</label>
			<label kind="assignment" x="-221" y="-161">dist_dir := left</label>
		</transition>
		<transition id="id49">
			<source ref="id43"/>
			<target ref="id44"/>
			<label kind="synchronisation" x="8" y="-144">dist_swap?</label>
			<label kind="assignment" x="-17" y="-127">dist_dir := right</label>
		</transition>
	</template>
	<template>
		<name x="9" y="9">Bag</name>
		<parameter>bag_id_t id</parameter>
		<declaration>// Place local declarations here.
clock x;

color_t color;

void sInval(direc_t side) {
    if (sensor_on[side]) {
    double uniform = 0.5; //random(1);
    if (color == YELLOW) {
        uniform = uniform * 10 + 60;
    } else {
        uniform = uniform * 25 + 50;
    }
    sensor_val[side] = fint(uniform);
    }
}

void sVal(direc_t side) {
    if (sensor_on[side]) {
        double uniform = 0.5; //random(1);
        if (color == YELLOW) {
            uniform = uniform * 10 + 50;
        } else {
            uniform = uniform * 15 + 30;
        }
        sensor_val[side] = fint(uniform);
    }
}

void sRes(direc_t side) {
    if (sensor_on[side]) {
        double uniform = 0.5; //random(1);
        sensor_val[side] = fint(uniform * 30 + 70);
    }
}</declaration>
		<location id="id50" x="34" y="-382">
			<name x="9" y="-425">Start</name>
		</location>
		<location id="id51" x="578" y="315">
			<name x="570" y="281">B</name>
			<urgent/>
		</location>
		<location id="id52" x="-510" y="315">
			<name x="-518" y="281">A</name>
			<urgent/>
		</location>
		<location id="id53" x="-204" y="272">
			<name x="-187" y="255">turning_end1</name>
			<committed/>
		</location>
		<location id="id54" x="272" y="272">
			<name x="298" y="264">turning_end2</name>
			<committed/>
		</location>
		<location id="id55" x="442" y="374">
			<name x="434" y="340">e2</name>
			<label kind="invariant" x="434" y="391">x&lt;=1200</label>
		</location>
		<location id="id56" x="272" y="374">
			<name x="264" y="340">d2</name>
			<label kind="invariant" x="264" y="391">x&lt;=2300</label>
		</location>
		<location id="id57" x="34" y="374">
			<name x="26" y="340">f</name>
			<label kind="invariant" x="26" y="391">x&lt;=3100</label>
		</location>
		<location id="id58" x="-204" y="374">
			<name x="-212" y="340">d1</name>
			<label kind="invariant" x="-212" y="391">x&lt;=2300</label>
		</location>
		<location id="id59" x="-374" y="374">
			<name x="-382" y="340">e1</name>
			<label kind="invariant" x="-382" y="391">x&lt;=1200</label>
		</location>
		<location id="id60" x="-153" y="-306">
			<name x="-161" y="-340">placed1</name>
			<urgent/>
		</location>
		<location id="id61" x="-153" y="-238">
			<name x="-136" y="-255">sensor_entering1</name>
			<label kind="invariant" x="-76" y="-238">x &lt;= 200</label>
		</location>
		<location id="id62" x="-153" y="179">
			<name x="-144" y="153">turning_begin1</name>
			<label kind="invariant" x="-136" y="170">x &lt;= 2700</label>
		</location>
		<location id="id63" x="-153" y="-153">
			<name x="-136" y="-170">sensor_front1</name>
			<label kind="invariant" x="-119" y="-153">x &lt;= 1200</label>
		</location>
		<location id="id64" x="-153" y="-59">
			<name x="-136" y="-76">sensor_exiting1</name>
			<label kind="invariant" x="-127" y="-59">x &lt;= 200</label>
		</location>
		<location id="id65" x="-153" y="34">
			<name x="-136" y="9">pre_stop1</name>
			<label kind="invariant" x="-127" y="26">x &lt;= 1200</label>
		</location>
		<location id="id66" x="221" y="-306">
			<name x="213" y="-340">placed2</name>
			<urgent/>
		</location>
		<location id="id67" x="221" y="-238">
			<name x="238" y="-255">sensor_entering2</name>
			<label kind="invariant" x="264" y="-238">x &lt;=200</label>
		</location>
		<location id="id68" x="221" y="179">
			<name x="238" y="153">turning_begin2</name>
			<label kind="invariant" x="238" y="170">x &lt;= 2700</label>
		</location>
		<location id="id69" x="221" y="-153">
			<name x="238" y="-170">sensor_front2</name>
			<label kind="invariant" x="255" y="-153">x &lt;= 1200</label>
		</location>
		<location id="id70" x="221" y="-59">
			<name x="238" y="-76">sensor_exiting2</name>
			<label kind="invariant" x="238" y="-59">x &lt;= 200</label>
		</location>
		<location id="id71" x="221" y="34">
			<name x="238" y="9">pre_stop2</name>
			<label kind="invariant" x="238" y="34">x &lt;= 1200</label>
		</location>
		<location id="id72" x="-637" y="315">
			<name x="-646" y="281">EndA</name>
		</location>
		<location id="id73" x="706" y="315">
			<name x="697" y="281">EndB</name>
		</location>
		<location id="id74" x="221" y="111">
			<name x="153" y="85">point2</name>
			<label kind="invariant" x="136" y="102">x &lt;= 1200</label>
		</location>
		<location id="id75" x="417" y="111">
			<name x="442" y="102">stop_right</name>
		</location>
		<location id="id76" x="-357" y="111">
			<name x="-442" y="77">stop_left</name>
		</location>
		<location id="id77" x="-153" y="111">
			<name x="-136" y="102">point1</name>
			<label kind="invariant" x="-136" y="85">x &lt;= 1200</label>
		</location>
		<init ref="id50"/>
		<transition id="id78">
			<source ref="id77"/>
			<target ref="id62"/>
			<label kind="guard" x="-144" y="119">x &gt;= 1200 &amp;&amp;
feed_m[left] == move</label>
			<label kind="assignment" x="-34" y="119">x := 0</label>
		</transition>
		<transition id="id79">
			<source ref="id75"/>
			<target ref="id74"/>
			<label kind="synchronisation" x="306" y="136">move_bag[right]?</label>
			<label kind="assignment" x="315" y="119">x := 0</label>
			<nail x="366" y="145"/>
		</transition>
		<transition id="id80">
			<source ref="id74"/>
			<target ref="id75"/>
			<label kind="guard" x="332" y="77">feed_m[right] == stop</label>
			<label kind="synchronisation" x="349" y="60">stop_bag[right]?</label>
		</transition>
		<transition id="id81">
			<source ref="id74"/>
			<target ref="id68"/>
			<label kind="guard" x="51" y="119">x &gt;= 1200 &amp;&amp;
feed_m[right] == move</label>
			<label kind="assignment" x="128" y="162">x := 0</label>
		</transition>
		<transition id="id82">
			<source ref="id65"/>
			<target ref="id77"/>
			<label kind="guard" x="-127" y="43">x == 1200</label>
			<label kind="assignment" x="-127" y="60">x := 0</label>
		</transition>
		<transition id="id83">
			<source ref="id68"/>
			<target ref="id54"/>
			<label kind="guard" x="272" y="196">x &gt;= 2400</label>
			<label kind="assignment" x="281" y="213">x := 0</label>
		</transition>
		<transition id="id84">
			<source ref="id59"/>
			<target ref="id58"/>
			<label kind="guard" x="-340" y="315">dist_dir == right
&amp;&amp; x&gt;=1000</label>
			<label kind="assignment" x="-323" y="349">x:=0</label>
			<nail x="-280" y="332"/>
		</transition>
		<transition id="id85">
			<source ref="id56"/>
			<target ref="id57"/>
			<label kind="guard" x="119" y="400">dist_dir==left
&amp;&amp; x&gt;=2200</label>
			<label kind="assignment" x="136" y="434">x:=0</label>
			<nail x="170" y="400"/>
		</transition>
		<transition id="id86">
			<source ref="id54"/>
			<target ref="id57"/>
			<label kind="guard" x="102" y="272">dist_dir == left</label>
		</transition>
		<transition id="id87">
			<source ref="id53"/>
			<target ref="id57"/>
			<label kind="guard" x="-178" y="264">dist_dir == right</label>
		</transition>
		<transition id="id88">
			<source ref="id53"/>
			<target ref="id59"/>
			<label kind="guard" x="-391" y="264">dist_dir == left</label>
		</transition>
		<transition id="id89">
			<source ref="id51"/>
			<target ref="id73"/>
			<label kind="guard" x="578" y="272">color == BLACK</label>
			<label kind="assignment" x="510" y="332">finished_bags := finished_bags + 1</label>
		</transition>
		<transition id="id90">
			<source ref="id52"/>
			<target ref="id72"/>
			<label kind="guard" x="-629" y="264">color == YELLOW</label>
			<label kind="assignment" x="-688" y="323">finished_bags := finished_bags + 1</label>
		</transition>
		<transition id="id91">
			<source ref="id59"/>
			<target ref="id52"/>
			<label kind="guard" x="-527" y="349">dist_dir == left 
&amp;&amp; x&gt;=1000</label>
		</transition>
		<transition id="id92">
			<source ref="id58"/>
			<target ref="id57"/>
			<label kind="guard" x="-136" y="315">dist_dir == right
&amp;&amp; x&gt;=2200</label>
			<label kind="assignment" x="-136" y="349">x:=0</label>
			<nail x="-68" y="332"/>
		</transition>
		<transition id="id93">
			<source ref="id58"/>
			<target ref="id59"/>
			<label kind="guard" x="-348" y="400">dist_dir == left
&amp;&amp; x&gt;=2200</label>
			<label kind="assignment" x="-331" y="434">x:=0</label>
			<nail x="-272" y="400"/>
		</transition>
		<transition id="id94">
			<source ref="id55"/>
			<target ref="id56"/>
			<label kind="guard" x="306" y="408">dist_dir == left
&amp;&amp; x&gt;=1000</label>
			<label kind="assignment" x="323" y="442">x:=0</label>
			<nail x="357" y="408"/>
		</transition>
		<transition id="id95">
			<source ref="id56"/>
			<target ref="id55"/>
			<label kind="guard" x="289" y="306">dist_dir == right
&amp;&amp; x&gt;=2200</label>
			<label kind="assignment" x="306" y="357">x:=0</label>
			<nail x="357" y="340"/>
		</transition>
		<transition id="id96">
			<source ref="id57"/>
			<target ref="id58"/>
			<label kind="guard" x="-127" y="400">dist_dir == left
&amp;&amp; x&gt;=2500</label>
			<label kind="assignment" x="-102" y="434">x:=0</label>
			<nail x="-68" y="400"/>
		</transition>
		<transition id="id97">
			<source ref="id57"/>
			<target ref="id56"/>
			<label kind="guard" x="119" y="323">dist_dir == right
&amp;&amp; x&gt;=2500</label>
			<label kind="assignment" x="119" y="357">x:=0</label>
			<nail x="162" y="340"/>
		</transition>
		<transition id="id98">
			<source ref="id55"/>
			<target ref="id51"/>
			<label kind="guard" x="493" y="357">x &gt;= 1000 &amp;&amp;
dist_dir == right</label>
		</transition>
		<transition id="id99">
			<source ref="id54"/>
			<target ref="id55"/>
			<label kind="guard" x="315" y="281">dist_dir == right</label>
		</transition>
		<transition id="id100">
			<source ref="id64"/>
			<target ref="id65"/>
			<label kind="guard" x="-127" y="-42">x == 200</label>
			<label kind="assignment" x="-127" y="-25">x := 0,
sRes(left)</label>
		</transition>
		<transition id="id101">
			<source ref="id63"/>
			<target ref="id64"/>
			<label kind="guard" x="-144" y="-136">x == 1200</label>
			<label kind="assignment" x="-144" y="-119">x := 0,
sInval(left)</label>
		</transition>
		<transition id="id102">
			<source ref="id61"/>
			<target ref="id63"/>
			<label kind="guard" x="-144" y="-229">x == 200</label>
			<label kind="assignment" x="-144" y="-212">x := 0,
sVal(left)</label>
		</transition>
		<transition id="id103">
			<source ref="id62"/>
			<target ref="id53"/>
			<label kind="guard" x="-136" y="196">x &gt;= 2400</label>
			<label kind="assignment" x="-136" y="213">x := 0</label>
		</transition>
		<transition id="id104">
			<source ref="id60"/>
			<target ref="id61"/>
			<label kind="synchronisation" x="-136" y="-314">bag[left]!</label>
			<label kind="assignment" x="-136" y="-297">x := 0,
sInval(left)</label>
		</transition>
		<transition id="id105">
			<source ref="id50"/>
			<target ref="id60"/>
			<label kind="synchronisation" x="-204" y="-374">place[left]?</label>
			<label kind="assignment" x="-204" y="-408">color := color_order[id % 5],
x := 0</label>
		</transition>
		<transition id="id106">
			<source ref="id71"/>
			<target ref="id74"/>
			<label kind="guard" x="238" y="51">x &gt;= 1200</label>
			<label kind="assignment" x="238" y="68">x := 0</label>
		</transition>
		<transition id="id107">
			<source ref="id70"/>
			<target ref="id71"/>
			<label kind="guard" x="238" y="-42">x == 200</label>
			<label kind="assignment" x="238" y="-25">x := 0,
sRes(right)</label>
		</transition>
		<transition id="id108">
			<source ref="id69"/>
			<target ref="id70"/>
			<label kind="guard" x="230" y="-136">x == 1200</label>
			<label kind="assignment" x="230" y="-119">x := 0,
sInval(right)</label>
		</transition>
		<transition id="id109">
			<source ref="id67"/>
			<target ref="id69"/>
			<label kind="guard" x="230" y="-221">x == 200</label>
			<label kind="assignment" x="230" y="-204">x := 0,
sVal(right)</label>
		</transition>
		<transition id="id110">
			<source ref="id66"/>
			<target ref="id67"/>
			<label kind="synchronisation" x="238" y="-314">bag[right]!</label>
			<label kind="assignment" x="238" y="-297">x := 0,
sInval(right)</label>
		</transition>
		<transition id="id111">
			<source ref="id50"/>
			<target ref="id66"/>
			<label kind="synchronisation" x="111" y="-374">place[right]?</label>
			<label kind="assignment" x="111" y="-408">color := color_order[id % 5],
x := 0</label>
		</transition>
		<transition id="id112">
			<source ref="id76"/>
			<target ref="id77"/>
			<label kind="synchronisation" x="-365" y="153">move_bag[left]?</label>
			<label kind="assignment" x="-323" y="128">x := 0</label>
			<nail x="-306" y="153"/>
		</transition>
		<transition id="id113">
			<source ref="id77"/>
			<target ref="id76"/>
			<label kind="guard" x="-331" y="85">feed_m[left] == stop</label>
			<label kind="synchronisation" x="-331" y="68">stop_bag[left]?</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
// List one or more processes to be composed into a system.
feed_belt0 =  Feed(left);
feed_belt1 =  Feed(right);

dropper = SmortBagDropperEx3(NUM_OF_BAGS, left);

system Bag, Distribution, feed_belt0, feed_belt1, 
dropper,
SingleSort;
</system>
	<queries>
		<option key="--diagnostic" value="1"/>
		<query>
			<formula/>
			<comment>=== Ex 3:</comment>
		</query>
		<query>
			<formula/>
			<comment>=== Bags are delivered to the right destination ===</comment>
		</query>
		<query>
			<formula>A[] forall (i: bag_id_t) Bag(i).A imply Bag(i).color == YELLOW</formula>
			<comment>Black is not sorted incorrectly</comment>
			<option key="--diagnostic" value="1"/>
			<result outcome="success" type="quality" timestamp="2024-03-22 16:18:25 +0100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula>A[] forall (i: bag_id_t) Bag(i).B imply Bag(i).color == BLACK</formula>
			<comment>Yellow is not sorted incorrectly</comment>
			<option key="--diagnostic" value="1"/>
			<result outcome="success" type="quality" timestamp="2024-03-22 16:18:27 +0100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula>A[] !deadlock || (forall (i: bag_id_t) Bag(i).EndA || Bag(i).EndB)</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-03-22 16:18:29 +0100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment>=== Bags are delivered to a destination ===</comment>
		</query>
		<query>
			<formula/>
			<comment>=== System delivers set number of bags ===</comment>
		</query>
		<query>
			<formula>A&lt;&gt; dropper.Finished</formula>
			<comment/>
			<option key="--diagnostic" value="1"/>
			<result outcome="success" type="quality" timestamp="2024-03-22 16:18:36 +0100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment>=== Bags do not collide ===</comment>
		</query>
		<query>
			<formula>A[] forall (i: bag_id_t) forall (j : bag_id_t)
(Bag(i).placed1 &amp;&amp; Bag(j).placed1) ||
(Bag(i).placed2 &amp;&amp; Bag(j).placed2) ||
(Bag(i).sensor_entering1 &amp;&amp; Bag(j).sensor_entering1) ||
(Bag(i).sensor_entering2 &amp;&amp; Bag(j).sensor_entering2) ||
(Bag(i).sensor_front1 &amp;&amp; Bag(j).sensor_front1) ||
(Bag(i).sensor_front2 &amp;&amp; Bag(j).sensor_front2) ||
(Bag(i).sensor_exiting1 &amp;&amp; Bag(j).sensor_exiting1) ||
(Bag(i).sensor_exiting2 &amp;&amp; Bag(j).sensor_exiting2) ||
(Bag(i).pre_stop1 &amp;&amp; Bag(j).pre_stop1) ||
(Bag(i).pre_stop2 &amp;&amp; Bag(j).pre_stop2) ||
(Bag(i).point1 &amp;&amp; Bag(j).point1) ||
(Bag(i).point2 &amp;&amp; Bag(j).point2) ||
(Bag(i).turning_begin1 &amp;&amp; Bag(j).turning_begin1) ||
(Bag(i).turning_begin2 &amp;&amp; Bag(j).turning_begin2) ||
(Bag(i).turning_end1 &amp;&amp; Bag(j).turning_end1) ||
(Bag(i).turning_end2 &amp;&amp; Bag(j).turning_end2)
imply i == j</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-03-22 16:18:40 +0100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula>A[] forall (i: bag_id_t) forall (j : bag_id_t)
(Bag(i).e1 &amp;&amp; Bag(j).e1) ||
(Bag(i).e2 &amp;&amp; Bag(j).e2) ||
(Bag(i).f &amp;&amp; Bag(j).f)
imply i == j</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-03-22 16:18:41 +0100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment>=== While bags are turning, the feed belt does not stop ===</comment>
		</query>
		<query>
			<formula>A[] forall (i: bag_id_t) Bag(i).turning_begin1 imply feed_belt0.Move</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-03-22 16:18:43 +0100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula>A[] forall (i: bag_id_t) Bag(i).turning_begin2 imply feed_belt1.Move</formula>
			<comment/>
			<option key="--diagnostic" value="1"/>
			<result outcome="success" type="quality" timestamp="2024-03-22 16:18:44 +0100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment>=== While bags are turning, the distribution belt does not change direction ===</comment>
			<option key="--diagnostic" value="1"/>
		</query>
		<query>
			<formula>A[] forall (i: bag_id_t)
!(
(Bag(i).turning_begin1 || Bag(i).turning_begin2 ||
Bag(i).turning_end1 || Bag(i).turning_end2) 
&amp;&amp; (Distribution.Change1 || Distribution.Change2)
)

</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-03-22 16:18:46 +0100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment>=== Bag will be stopped if needed ===</comment>
		</query>
		<query>
			<formula>SingleSort(right).wait_for_done --&gt; exists (i: bag_id_t) Bag(i).stop_right</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-03-22 16:18:48 +0100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula>SingleSort(left).wait_for_done --&gt; exists (i: bag_id_t) Bag(i).stop_left</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-03-22 16:18:50 +0100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment>=== If the feed belt is stopped, bags are not present in invalid states ===</comment>
		</query>
		<query>
			<formula>A[] feed_m[left] == stop imply !(forall (i: bag_id_t) Bag(i).placed1 &amp;&amp; Bag(i).sensor_entering1 &amp;&amp; Bag(i).sensor_front1 &amp;&amp; Bag(i).sensor_exiting1 &amp;&amp; Bag(i).turning_begin1)</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-03-22 16:18:51 +0100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula>A[] feed_m[right] == stop imply !(forall (i: bag_id_t) Bag(i).placed2 &amp;&amp; Bag(i).sensor_entering2 &amp;&amp; Bag(i).sensor_front2 &amp;&amp; Bag(i).sensor_exiting2 &amp;&amp; Bag(i).turning_begin2)</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-03-22 16:18:53 +0100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
	</queries>
</nta>
