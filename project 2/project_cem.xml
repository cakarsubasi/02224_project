<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// Place global declarations here.

const int NUM_OF_BELTS = 1; 
typedef scalar[NUM_OF_BELTS] belt_id_t;
// Due to our time constraint, there can only be two bags at a single belt at a time
typedef scalar[2] bag_id_t;

bool sensor_on[2] = {false, false};
int sensor_val[2] = {100, 100};
</declaration>
	<template>
		<name>Controller</name>
		<declaration>clock x;</declaration>
		<location id="id0" x="-119" y="-408">
			<name x="-187" y="-416">Start</name>
			<urgent/>
		</location>
		<location id="id1" x="-119" y="-263">
			<name x="-195" y="-272">AwaitS</name>
			<label kind="comments" x="-365" y="-272">Use a channel here?</label>
		</location>
		<location id="id2" x="-119" y="-136">
			<name x="-212" y="-145">AwaitNotS</name>
		</location>
		<location id="id3" x="-119" y="-8">
			<name x="-187" y="-17">Sleep7</name>
			<label kind="invariant" x="-93" y="-17">x&lt;=7</label>
		</location>
		<location id="id4" x="-119" y="110">
			<name x="-187" y="102">Sleep6</name>
			<label kind="invariant" x="-93" y="102">x&lt;=6</label>
		</location>
		<location id="id5" x="-119" y="221">
			<name x="-238" y="212">ProcessVideo</name>
			<label kind="invariant" x="-102" y="221">x&lt;=6</label>
		</location>
		<location id="id6" x="-119" y="348">
			<name x="-195" y="340">SendId</name>
			<urgent/>
		</location>
		<init ref="id0"/>
		<transition id="id7">
			<source ref="id6"/>
			<target ref="id1"/>
			<nail x="-17" y="348"/>
			<nail x="-17" y="-263"/>
		</transition>
		<transition id="id8">
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="guard" x="-110" y="263">x&gt;=0</label>
			<label kind="assignment" x="-110" y="289">x=0</label>
		</transition>
		<transition id="id9">
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="guard" x="-110" y="144">x&gt;=6</label>
			<label kind="assignment" x="-110" y="161">x=0</label>
		</transition>
		<transition id="id10">
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="-102" y="34">x&gt;=7</label>
			<label kind="assignment" x="-102" y="59">x=0</label>
		</transition>
		<transition id="id11">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="assignment" x="-110" y="-68">x=0</label>
		</transition>
		<transition id="id12">
			<source ref="id1"/>
			<target ref="id2"/>
		</transition>
		<transition id="id13">
			<source ref="id0"/>
			<target ref="id1"/>
		</transition>
	</template>
	<template>
		<name>Camera</name>
		<location id="id14" x="0" y="0">
		</location>
		<init ref="id14"/>
	</template>
	<template>
		<name>Sensor</name>
		<location id="id15" x="0" y="0">
		</location>
		<init ref="id15"/>
	</template>
	<template>
		<name>Laser</name>
		<location id="id16" x="0" y="0">
		</location>
		<init ref="id16"/>
	</template>
	<template>
		<name>Item</name>
		<parameter>belt_id_t belt_id, bag_id_t bag_id</parameter>
		<declaration>clock x;

bool sensor_detected;</declaration>
		<location id="id17" x="-306" y="-561">
			<name x="-323" y="-544">Wait</name>
			<label kind="comments" x="-705" y="-637">The time precision is 100 ms = 1 unit</label>
		</location>
		<location id="id18" x="-306" y="-314">
			<name x="-323" y="-297">Laser</name>
			<label kind="invariant" x="-365" y="-323">x&lt;=6</label>
		</location>
		<location id="id19" x="-306" y="-195">
			<name x="-357" y="-178">BeforeVideo</name>
			<label kind="invariant" x="-357" y="-204">x&lt;=5</label>
		</location>
		<location id="id20" x="-306" y="-76">
			<name x="-340" y="-59">Video</name>
			<label kind="invariant" x="-365" y="-85">x&lt;=16</label>
		</location>
		<location id="id21" x="-306" y="42">
			<name x="-331" y="59">End</name>
			<urgent/>
		</location>
		<location id="id22" x="-306" y="-433">
			<name x="-332" y="-416">Start</name>
			<label kind="invariant" x="-365" y="-442">x&lt;=3</label>
		</location>
		<init ref="id17"/>
		<transition id="id23">
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="guard" x="-297" y="-34">x&gt;=16</label>
			<label kind="assignment" x="-297" y="-8">x=0</label>
		</transition>
		<transition id="id24">
			<source ref="id22"/>
			<target ref="id18"/>
			<label kind="guard" x="-297" y="-391">x&gt;=3</label>
			<label kind="assignment" x="-493" y="-391">sensor_detected=true,
x=0</label>
		</transition>
		<transition id="id25">
			<source ref="id19"/>
			<target ref="id20"/>
			<label kind="guard" x="-297" y="-144">x&gt;=5</label>
			<label kind="assignment" x="-297" y="-119">x=0</label>
		</transition>
		<transition id="id26">
			<source ref="id18"/>
			<target ref="id19"/>
			<label kind="guard" x="-297" y="-255">x&gt;=2</label>
			<label kind="assignment" x="-501" y="-272">x=0,
sensor_detected=false</label>
		</transition>
		<transition id="id27">
			<source ref="id21"/>
			<target ref="id17"/>
			<nail x="-110" y="42"/>
			<nail x="-110" y="-561"/>
		</transition>
		<transition id="id28">
			<source ref="id17"/>
			<target ref="id22"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
// List one or more processes to be composed into a system.

system Controller, Camera, Sensor, Laser, Item;
</system>
	<queries>
		<option key="--diagnostic" value="1"/>
		<query>
			<formula/>
			<comment>=== Ex 3:</comment>
		</query>
		<query>
			<formula/>
			<comment>=== Bags are delivered to the right destination ===</comment>
		</query>
		<query>
			<formula>A[] forall (i: bag_id_t) Bag(i).A imply Bag(i).color == YELLOW</formula>
			<comment>Black is not sorted incorrectly</comment>
			<option key="--diagnostic" value="1"/>
			<result outcome="success" type="quality" timestamp="2024-03-22 16:18:25 +0100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula>A[] forall (i: bag_id_t) Bag(i).B imply Bag(i).color == BLACK</formula>
			<comment>Yellow is not sorted incorrectly</comment>
			<option key="--diagnostic" value="1"/>
			<result outcome="success" type="quality" timestamp="2024-03-22 16:18:27 +0100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula>A[] !deadlock || (forall (i: bag_id_t) Bag(i).EndA || Bag(i).EndB)</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-03-22 16:18:29 +0100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment>=== Bags are delivered to a destination ===</comment>
		</query>
		<query>
			<formula/>
			<comment>=== System delivers set number of bags ===</comment>
		</query>
		<query>
			<formula>A&lt;&gt; dropper.Finished</formula>
			<comment/>
			<option key="--diagnostic" value="1"/>
			<result outcome="success" type="quality" timestamp="2024-03-22 16:18:36 +0100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment>=== Bags do not collide ===</comment>
		</query>
		<query>
			<formula>A[] forall (i: bag_id_t) forall (j : bag_id_t)
(Bag(i).placed1 &amp;&amp; Bag(j).placed1) ||
(Bag(i).placed2 &amp;&amp; Bag(j).placed2) ||
(Bag(i).sensor_entering1 &amp;&amp; Bag(j).sensor_entering1) ||
(Bag(i).sensor_entering2 &amp;&amp; Bag(j).sensor_entering2) ||
(Bag(i).sensor_front1 &amp;&amp; Bag(j).sensor_front1) ||
(Bag(i).sensor_front2 &amp;&amp; Bag(j).sensor_front2) ||
(Bag(i).sensor_exiting1 &amp;&amp; Bag(j).sensor_exiting1) ||
(Bag(i).sensor_exiting2 &amp;&amp; Bag(j).sensor_exiting2) ||
(Bag(i).pre_stop1 &amp;&amp; Bag(j).pre_stop1) ||
(Bag(i).pre_stop2 &amp;&amp; Bag(j).pre_stop2) ||
(Bag(i).point1 &amp;&amp; Bag(j).point1) ||
(Bag(i).point2 &amp;&amp; Bag(j).point2) ||
(Bag(i).turning_begin1 &amp;&amp; Bag(j).turning_begin1) ||
(Bag(i).turning_begin2 &amp;&amp; Bag(j).turning_begin2) ||
(Bag(i).turning_end1 &amp;&amp; Bag(j).turning_end1) ||
(Bag(i).turning_end2 &amp;&amp; Bag(j).turning_end2)
imply i == j</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-03-22 16:18:40 +0100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula>A[] forall (i: bag_id_t) forall (j : bag_id_t)
(Bag(i).e1 &amp;&amp; Bag(j).e1) ||
(Bag(i).e2 &amp;&amp; Bag(j).e2) ||
(Bag(i).f &amp;&amp; Bag(j).f)
imply i == j</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-03-22 16:18:41 +0100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment>=== While bags are turning, the feed belt does not stop ===</comment>
		</query>
		<query>
			<formula>A[] forall (i: bag_id_t) Bag(i).turning_begin1 imply feed_belt0.Move</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-03-22 16:18:43 +0100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula>A[] forall (i: bag_id_t) Bag(i).turning_begin2 imply feed_belt1.Move</formula>
			<comment/>
			<option key="--diagnostic" value="1"/>
			<result outcome="success" type="quality" timestamp="2024-03-22 16:18:44 +0100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment>=== While bags are turning, the distribution belt does not change direction ===</comment>
			<option key="--diagnostic" value="1"/>
		</query>
		<query>
			<formula>A[] forall (i: bag_id_t)
!(
(Bag(i).turning_begin1 || Bag(i).turning_begin2 ||
Bag(i).turning_end1 || Bag(i).turning_end2) 
&amp;&amp; (Distribution.Change1 || Distribution.Change2)
)

</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-03-22 16:18:46 +0100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment>=== Bag will be stopped if needed ===</comment>
		</query>
		<query>
			<formula>SingleSort(right).wait_for_done --&gt; exists (i: bag_id_t) Bag(i).stop_right</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-03-22 16:18:48 +0100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula>SingleSort(left).wait_for_done --&gt; exists (i: bag_id_t) Bag(i).stop_left</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-03-22 16:18:50 +0100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula/>
			<comment>=== If the feed belt is stopped, bags are not present in invalid states ===</comment>
		</query>
		<query>
			<formula>A[] feed_m[left] == stop imply !(forall (i: bag_id_t) Bag(i).placed1 &amp;&amp; Bag(i).sensor_entering1 &amp;&amp; Bag(i).sensor_front1 &amp;&amp; Bag(i).sensor_exiting1 &amp;&amp; Bag(i).turning_begin1)</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-03-22 16:18:51 +0100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
		<query>
			<formula>A[] feed_m[right] == stop imply !(forall (i: bag_id_t) Bag(i).placed2 &amp;&amp; Bag(i).sensor_entering2 &amp;&amp; Bag(i).sensor_front2 &amp;&amp; Bag(i).sensor_exiting2 &amp;&amp; Bag(i).turning_begin2)</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2024-03-22 16:18:53 +0100">
				<option key="--diagnostic" value="1"/>
			</result>
		</query>
	</queries>
</nta>
